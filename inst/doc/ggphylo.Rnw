% This vignette was taken from ggdendro and ruthlessly gutted for adaptation to the current package.
% Thanks to Andrie de Vries: https://github.com/andrie/

% \VignetteIndexEntry{Plotting phylogenetic trees and alignments with ggplot}
% \VignettePackage{ggphylo}
% \VignetteKeyword{phylogenetics}
% \VignetteKeyword{alignment}
% \VignetteKeyword{ggplot}

% Definitions
\newcommand{\ggphylo}{\code{ggphylo}}
\newcommand{\code}[1]{\texttt{#1}\xspace}
\newcommand{\ggplot}{\code{ggplot}}
\newcommand{\phylo}{\code{phylo}}

\documentclass[10pt,oneside]{article}

\usepackage{a4wide}
\usepackage{xspace}

\SweaveOpts{fig=TRUE}
\SweaveOpts{include=TRUE}
\SweaveOpts{center.fig=TRUE}
\SweaveOpts{keep.source=TRUE}

\begin{document}
\pagestyle{empty}

\DefineVerbatimEnvironment{Sinput}{Verbatim} {xleftmargin=0em}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{xleftmargin=0em}
\DefineVerbatimEnvironment{Scode}{Verbatim}{xleftmargin=0em}
\fvset{listparameters={\setlength{\topsep}{0pt}}}
\renewenvironment{Schunk}{\vspace{\topsep}}{\vspace{\topsep}}

<<echo=false, include=FALSE, fig=FALSE>>=
options(width=60)
options(continue=" ")
@

%\setlength{\baselineskip}{1.25em}
%\setlength{\parskip}{0.5em}
%\setlength{\parindent}{0.0em}

%\begin{titlepage}
\title{Using \ggphylo and \ggplot to visualize phylogenetic trees and alignments}
\author{Gregory Jordan}
%\end{titlepage}
\maketitle{}

\ggphylo is a package that provides convenient functions for
manipulating \phylo objects from R and plotting them using
\ggplot{}. External data can be attached to trees via NHX-format
files, data frames or CSV files. These data can be mapped to visual
elements of the tree or trees, allowing one to construct complex
visualizations in a simple, flexible way.

<<initialise, echo=FALSE, fig=FALSE, include=FALSE>>=
library(ggplot2)
library(ggphylo)
library(gridExtra)
set.seed(1)
@

\section{For the impatient}

\subsection{Basic plots}

To get started, simply input a \phylo object (or a list of
\phylo objects) and call the \ggphylo function:

<<phylo1, width=6, height=3>>=
tree.list <- list()
for (i in 1:3) {
  x <- rtree(20)  # Random trees 20 leaves.
  tree.list[[i]] <- x
}
ggphylo(tree.list) # Plot the list of tres.
@
%\begin{figure}[h]
%\begin{center}
%\includegraphics[width=4in]{ggphylo-phylo1}
%\end{center}
%\caption{A few trees.}
%\end{figure}

The result looks similar to the standard \code{plot.phylo} function from the \code{ape} package. It also scales well to several trees:

<<phylo2, width=8, height=8>>=
n <- 12
sizes <- sample(2:20, n, replace=T)
for (i in 1:n) {
  tree.list[[i]] <- rtree(sizes[i])
}
ggphylo(tree.list, label.size=2) # Plot the list of trees.
@

%\begin{figure}[h]
%\begin{center}
%\includegraphics[width=4in]{ggphylo-phylo2}
%\end{center}
%\caption{Many trees.}
%\end{figure}

\subsection{Plotting data along trees}

The \ggphylo package defines three visual entities ({\bf lines, nodes,
and labels}) and three visual properties ({\bf color, alpha, size})
for visualizing data along a tree. Any combination of entity and
property can be used: for example, the following code maps {\bf
bootstrap} values to {\bf line color}, and {\bf population size}
values to {\bf node size}:

<<phylo3, fig=TRUE, width=7, height=5, include=TRUE, keep.source=TRUE>>=
n <- 40;  x <- rtree(n); n.nodes <- length(nodes(x))
bootstraps <- 100 - rexp(n.nodes, rate=5) * 100
pop.sizes <- pmax(0, rnorm(n.nodes, mean=50000, sd=50000))
for (i in nodes(x)) {
  x <- tree.set.tag(x, i, 'bootstrap', bootstraps[i])
  x <- tree.set.tag(x, i, 'pop.size', pop.sizes[i])
}
plot.args <- list(
  x,
  line.color.by='bootstrap',
  line.color.scale=scale_colour_gradient(limits=c(50, 100), low='red', high='black'),
  node.size.by='pop.size',
  node.size.scale = scale_size_continuous(limits=c(0, 100000), range=c(1, 5)),
  label.size=2
)
do.call(ggphylo, plot.args)
@

<<phylo4, fig=TRUE, width=7, height=5, include=TRUE, keep.source=TRUE>>=
unrooted.args <- plot.args
unrooted.args[['layout']] <- 'unrooted'
do.call(ggphylo, unrooted.args)
@

<<phylo5, fig=TRUE, width=7, height=5, include=TRUE, keep.source=TRUE>>=
radial.args <- plot.args
radial.args[['layout']] <- 'radial'
do.call(ggphylo, radial.args)
@

Details of the above code will be explained in the remaining sections,
but the general approach should be somewhat familiar to existing
\ggplot users. This introductory section was designed to merely give a
brief overview of the main functionality exposed by \ggphylo.

%------------------------------------------------------------------------------

\section{Using \ggphylo}

\subsection{Attaching annotations to trees}

To visualize data along a phylogeny, it must first be associated with
nodes in the tree. \ggphylo uses "tags" to store a set of key-value
pairs with each node. (Internally, this is done by creating a list of
lists, one per node, attached to the \phylo object.) Data can be
associated with nodes of a tree in three ways. Let's explore those
methods by working with simple tree objects and attaching data in each
of three ways:

\begin{itemize}

\item{{\bf \code{tree.set.tag}} This function allows a single key-value pair
to be attached to a given node in the tree. The \phylo object, node index, key and value are required arguments:

<<phylo5, fig=FALSE, keep.source=TRUE>>=
tree <- tree.read('((a,b),c);')

# Use the 'tree.find' method to return the node index given a label.
b.node.index <- tree.find(tree, 'b')
print(b.node.index)

x <- tree.set.tag(tree, tree.find(tree, 'b'), 'foo', 'bar')
print(as.character(x))
print(as.data.frame(x, minimal.columns=T))
@

Note that the above code uses a few of the convenience functions
exposed by \ggphylo: \code{tree.find} for finding the node index which
has a given label, \code{as.character} which converts a tree into a
Newick or NHX formatted string, and \code{as.data.frame} which
converts a \phylo object into a \code{data.frame} with one row per
node. The \code{minimal.columns=T} option causes only the bare minimum
information about each node to be included; a more detailed data frame
can be produced by setting \code{minimal.columns=F}; }

\item{\code{tree.read.nhx} The NHX format allows key-value pairs to be
stored within a Newick-formatted tree string. \ggphylo contains a
tree.read.nhx function which extracts this data from a NHX string and
stores it as tags in the returned \phylo object:

<<phylo5, fig=FALSE, keep.source=TRUE>>=
x <- tree.read.nhx('((a,b[&&NHX:foo=bar]),c[&&NHX:bizz=buzz]);')
print(as.data.frame(x, minimal.columns=T))
@

It's useful to test how robust the tree parsing and writing functions
are by performing round-trip tests:

<<phylo5, fig=FALSE, keep.source=TRUE>>=
str <- '(((a[&&NHX:x=1],b[&&NHX:x=2])c[&&NHX:y=3],d[&&NHX:y=4])e,f)g;'
x <- tree.read.nhx(str)
print(as.character(x) == str)
@

}

\item{\code{tree.load.data} Sometimes the NHX format can be cumbersome
for storing data when it is more easily available in row-based
formats. In this case, a \code{data.frame} or CSV file can be used to
add tags to a tree using the \code{tree.load.data} function. The only
requirement is a 'label' column in the source data, which is used to
match unique labels in the data and in the tree:

<<phylo5, fig=FALSE, keep.source=TRUE>>=
tree <- tree.read('((a,b),c);')
x <- data.frame(
  label=c('a', 'b', 'c'),
  xyz=c(1, 2, 3)
)
print(x)
tree <- tree.load.data(tree, x)
print(as.data.frame(tree, minimal.columns=T))
@

}

\end{itemize}

\subsection{Controlling visual mappings}



\end{document}